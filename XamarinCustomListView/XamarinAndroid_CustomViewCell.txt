CustomListView Class

using Xamarin.Forms;

namespace ProjectName.Controls
{
    public class CustomListView : ListView
    {
    }
}

CustomViewCell Class

using Xamarin.Forms;

namespace ProjectName.Controls
{
    public class CustomViewCell : ViewCell
    {
        public static readonly BindableProperty SelectedItemBackgroundColorProperty = BindableProperty.Create("SelectedItemBackgroundColor", typeof(Color), typeof(CustomViewCell), Color.Default);

        public Color SelectedItemBackgroundColor
        {
            get { return (Color)GetValue(SelectedItemBackgroundColorProperty); }
            set { SetValue(SelectedItemBackgroundColorProperty, value); }
        }
    }
}

CustomViewCellRenderer for Android

using Android.Content;
using Android.Graphics.Drawables;
using Android.Views;
using ProjectName.Controls;
using ProjectName.Droid.Renderers;
using System.ComponentModel;
using Xamarin.Forms;
using Xamarin.Forms.Platform.Android;

[assembly: ExportRenderer(typeof(CustomViewCell), typeof(CustomViewCellRenderer))]

namespace ProjectName.Droid.Renderers
{
    public class CustomViewCellRenderer : ViewCellRenderer
    {
        private Android.Views.View _cellCore;
        private Drawable _unselectedBackground;
        private bool _selected;

        protected override Android.Views.View GetCellCore(Cell item, Android.Views.View convertView, ViewGroup parent, Context context)
        {
            _cellCore = base.GetCellCore(item, convertView, parent, context);
            if (!_selected)
            {
                _cellCore.SetBackgroundColor(Android.Graphics.Color.Transparent);
            }

            _selected = false;
            _unselectedBackground = _cellCore.Background;

            return _cellCore;
        }

        protected override void OnCellPropertyChanged(object sender, PropertyChangedEventArgs args)
        {
            base.OnCellPropertyChanged(sender, args);

            if (args.PropertyName == "IsSelected")
            {
                if (!_selected)
                {
                    var customViewCell = sender as CustomViewCell;
                    _cellCore.SetBackgroundColor(customViewCell.SelectedItemBackgroundColor.ToAndroid());
                    _selected = true;
                }
                else
                {
                    _cellCore.SetBackground(_unselectedBackground);
                    _cellCore.SetBackgroundColor(Android.Graphics.Color.Transparent);
                    _selected = false;
                }
            }
        }
    }
}

XAML 

...
								<Frame
                                    Margin="30,0,30,25"
                                    Padding="2"
                                    BackgroundColor="Transparent"
                                    BorderColor="#283547"
                                    HasShadow="False"
                                    HeightRequest="310"
                                    HorizontalOptions="CenterAndExpand"
                                    WidthRequest="400">
                                    <controls:CustomListView
                                        Margin="0"
                                        HasUnevenRows="True"
                                        HorizontalOptions="CenterAndExpand"
                                        IsPullToRefreshEnabled="False"
                                        ItemsSource="{Binding DeviceSubTypeList, Mode=OneWay}"
                                        SelectedItem="{Binding SelectedDeviceSubType, Mode=OneWayToSource}"
                                        SelectionMode="Single"
                                        SeparatorColor="{Binding PageBackgroundColor, Mode=OneWay}"
                                        VerticalOptions="FillAndExpand">
                                        <controls:CustomListView.Behaviors>
                                            <b:EventToCommandBehavior
                                                Command="{Binding SelectedDeviceSubTypeCommand, Mode=OneWay}"
                                                EventArgsConverter="{StaticResource ItemTappedConverter}"
                                                EventName="ItemTapped" />
                                        </controls:CustomListView.Behaviors>
                                        <ListView.ItemTemplate>
                                            <DataTemplate>
                                                <controls:CustomViewCell SelectedItemBackgroundColor="#C5C5CC">
                                                    <Label
                                                        Margin="0,5,0,0"
                                                        FontSize="Medium"
                                                        HorizontalOptions="CenterAndExpand"
                                                        HorizontalTextAlignment="Center"
                                                        Style="{StaticResource labelBlackBoldFontFamily}"
                                                        Text="{Binding DeviceNameText, Mode=OneWay}"
                                                        TextColor="#283547" />
                                                </controls:CustomViewCell>
                                            </DataTemplate>
                                        </ListView.ItemTemplate>
                                    </controls:CustomListView>
                                </Frame>
...